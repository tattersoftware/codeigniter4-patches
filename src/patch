#!/bin/sh

##
# Tatter\Patches
# https://github.com/tattersoftware/codeigniter4-patches
#
# Patches an existing CodeIgniter 4 project repo to a
# different version of the framework.
##

show_help() {
    cat >&2 <<EOT

    Usage: ./patch [-c <current version>] [-v <target version>] [-e <user Github email>] [-n <user Github username>]

    Patches an existing CodeIgniter 4 project repo to a different version of the framework.

    Options:
    -h             Help. Show this help message and exit
    -c commit-ish  Alternate version to consider "current" (rarely needed).
    -v commit-ish  Version to use for patching. Defaults to the latest.
    -e             User Github email.
    -n             User Github username.

    Examples:
    Patch the current installed repo up to the latest available.
        ${0}:
    Patch the current installed repo to a specific version.
        ${0} -v 4.1.2
    Assume the repo is in an older state and patch to a specific commit.
        ${0} -c 4.0.4 -v dev-develop#0cff5488676f36f9e08874fdeea301222b6971a2
    Patch the current installed repo up to the latest available using Github credentials.
        ${0} -e example@gmail.com -n example_username

EOT
}

check_docker_env() {
    if [ -f "/.dockerenv" ]; then
        ENV_INFO="Running inside a Docker container"
    else
        ENV_INFO="Not running inside a Docker container"
    fi

    echo $ENV_INFO
}

get_installed_version() {
    if [[ -f "composer.lock" ]]; then
        INSTALLED_VERSION=$(jq -r '.packages[] | select(.name == "codeigniter4/framework") | .version' < composer.lock)
        echo $INSTALLED_VERSION
    else
        echo "Error: Could not find composer.lock." >&2
        exit 1
    fi
}

get_latest_version() {
    LATEST_VERSION=$(curl --silent "https://codeigniter.com/download" | grep -o 'The current version is v[0-9]\+\.[0-9]\+\.[0-9]\+' | cut -d' ' -f5)

    # Check if the LATEST_VERSION variable is empty
    if [ -z "$LATEST_VERSION" ]; then
        echo "Error: Failed to retrieve latest version"
        exit 1
    fi

    echo "$LATEST_VERSION"
}

CURRENT_VERSION=""
TARGET_VERSION=""
GH_USER_EMAIL=""
GH_USER_NAME=""

while getopts "hv:c:e:n:" OPT; do
    case ${OPT} in
        h)  ## -h help
            show_help
            exit 0
            ;;
        c)  ## -c <current version>
            CURRENT_VERSION=${OPTARG}
            ;;
        v)  ## -v <target version>
            TARGET_VERSION=${OPTARG}
            ;;
        e)  ## -e <user github email>
            GH_USER_EMAIL=${OPTARG}
            ;;
        n)  ## -n <user github username>
            GH_USER_NAME=${OPTARG}
            ;;
        \?) ## incorrect option
            echo "Error: Invalid option"
            exit 1
            ;;
    esac
done

ROOT=`pwd`
SCRIPTS=`dirname "$0"`
ITEMS="app/ public/ env spark"

# Get the installed and latest versions
INSTALLED_VERSION=$(get_installed_version)  # gets the installed version number
LATEST_VERSION=$(get_latest_version)  # gets the latest available version number

# Check if there is a current version and set it to installed version if found
if [[ -z "$CURRENT_VERSION" ]]; then  # checks if the variable CURRENT_VERSIONL is not empty
  CURRENT_VERSION=$INSTALLED_VERSION   # sets the value of CURRENT_VERSION to INSTALLED_VERSION
fi

# Check if there is a target version and set it to latest version if found
if [[ -z "$TARGET_VERSION" ]]; then  # checks if the variable TARGET_VERSIONL is not empty
  TARGET_VERSION=$LATEST_VERSION   # sets the value of TARGET_VERSION to LATEST_VERSION
fi

# Error handling
try()
{
	CODE=$1
	if [ $CODE -eq 0 ]; then
		return 0
	fi

	# Get the message from the remaining arguments
	shift;
	MESSAGE=$@

	echo "ERROR $CODE: $MESSAGE"
	exit $CODE
}

# Check environment
check_docker_env

# Verify executables
git --version
try $? "Git must be installed."

# Set github user email if specified
if [[ -n "$GH_USER_EMAIL" ]]; then
  git config --global user.email "$GH_USER_EMAIL"
fi

# Set github user name if specified
if [[ -n "$GH_USER_NAME" ]]; then
  git config --global user.name "$GH_USER_NAME"
fi

composer --version
try $? "Composer must be installed."

# Make sure this is a repository
if [ ! -d "$ROOT/.git/" ]; then
	try 1 "$ROOT is not a valid git repository."
fi

# Use the current branch as the base
BASE=`git rev-parse --abbrev-ref HEAD`

# Make sure the current branch is clean
if [ "`git status --porcelain`" ]; then
	try 1 "You have unresolved issues in the current branch ($BASE). Please resolve before patching."
fi

# Match a vendor path
if [ -d "$ROOT/vendor/codeigniter4/framework" ]; then
	PACKAGE="codeigniter4/framework"
elif [ -d "$ROOT/vendor/codeigniter4/codeigniter4" ]; then
	PACKAGE="codeigniter4/codeigniter4"
else
	try 1 "Unable to locate a valid vendor path."
fi

# Check for conflicting branches
for BRANCH in "tatter/scratch" "tatter/patches"; do
	TEST=`git rev-parse --verify --quiet $BRANCH`
	if [ $? -eq 0 ]; then
		# Make sure it is safe to delete
		if [ "`git log HEAD..$BRANCH`" ]; then
			try 1 "Unmerged commits on $BRANCH"
		fi

		git branch -d "$BRANCH"
		try $? "Unable to delete branch $BRANCH"
	fi
done

# Display environment info
echo "************************************"
echo "*          CONFIGURATION           *"
echo "************************************"
echo ""
echo "Environment:       $ENV_INFO"
echo "Scripts Directory: $SCRIPTS"
echo "Project Directory: $ROOT"
echo "Target Version:    $TARGET_VERSION"
echo "Current Version:   $CURRENT_VERSION"
echo "Source Package:    $PACKAGE"
echo "Base Branch:       $BASE"
echo "Selected Items:    $ITEMS"
echo ""

# From here on everything is destructive (but reversible) so we want hard stops
set -e

echo "************************************"
echo "*             STAGING              *"
echo "************************************"
echo ""

# Create a blank branch to work on
echo "Creating a new orphan branch..."
git switch --orphan tatter/scratch

# Bring over just what we need to recreate the framework
echo "Checking out necessary files from $BASE..."
git checkout "$BASE" -- .gitignore composer.*
git clean -fd

# If a current version was requested then change vendor first
if [ "$CURRENT_VERSION" ]; then
    echo "Updating the current vendor version to $CURRENT_VERSION..."
    composer require --no-scripts --with-all-dependencies "$PACKAGE" "$CURRENT_VERSION"
    git restore composer.*
fi

# Copy the source items
echo "Copying source items..."
for ITEM in $ITEMS; do
    cp -R "vendor/$PACKAGE/$ITEM" ./
done

# Add everything but the modified Composer files
echo "Adding items to staging area..."
git add .
git reset composer.*
git commit -m "Stage framework" --no-verify > /dev/null

# Check for a specific requested version
if [ "$TARGET_VERSION" ]; then
	composer require --no-scripts --with-all-dependencies "$PACKAGE" "$TARGET_VERSION"
fi

# Wipe out the current versions and copy in the new
echo "Copy new package files..."
for ITEM in $ITEMS; do
    rm -rf "$ITEM"
    cp -R "vendor/$PACKAGE/$ITEM" ./
done

# Add everything but the modified Composer files
echo "Adding items to staging area..."
git add .
git reset composer.*
git commit -m "Patch framework" --no-verify

# Get rid of the now-corrupt Composer files
echo "Removing corrupted Composer files..."
rm composer.*

# Create the new branch from base
echo "Creating a new branch from $BASE..."
git switch -c tatter/patches "$BASE"

# Restore the original state of vendor/
echo "Restoring original state of vendor/..."
composer install --no-scripts > /dev/null


echo "************************************"
echo "*              MERGING             *"
echo "************************************"
echo ""

# Attempt the merge
set +e
git cherry-pick tatter/scratch

if [ $? -eq 0 ]; then
	echo "************************************"
	echo "*              SUCCESS             *"
	echo "************************************"
	echo ""
	echo "Patch successful! Updated files are available on branch tatter/patches."
	git branch -D tatter/scratch
	exit 0
fi

git status

# Conflict: explain and exit
echo ""
echo "************************************"
echo "*            RESOLUTION            *"
echo "************************************"
echo ""
echo "Conflicts detected during patch! Follow the git instructions for resolution."
echo "Once resolution is complete your changes will be available on branch tatter/patches"
echo "and you should remove the old working branch at tatter/scratch."
echo ""

exit 1
